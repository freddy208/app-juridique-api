generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//
// ENUMS
//

enum RoleUtilisateur {
  ADMIN
  DG
  AVOCAT
  SECRETAIRE
  ASSISTANT
  JURISTE
  STAGIAIRE
}

enum StatutUtilisateur {
  ACTIF
  INACTIF
  SUSPENDU
}

enum StatutClient {
  ACTIF
  INACTIF
}

enum TypeDossier {
  SINISTRE_CORPOREL
  SINISTRE_MATERIEL
  SINISTRE_MORTEL
  IMMOBILIER
  SPORT
  CONTRAT
  CONTENTIEUX
  AUTRE
}

enum StatutDossier {
  OUVERT
  EN_COURS
  CLOS
  ARCHIVE
}

enum GraviteBlessure {
  MINEUR
  MOYEN
  GRAVE
  CRITIQUE
}

enum CategorieVehicule {
  VOITURE
  MOTO
  CAMION
  AUTRE
}

enum RegimeFoncier {
  TITRE_FONCIER
  COUTUMIER
  BAIL
}

enum EtapeProcedure {
  INSTRUCTIVE
  AUDIENCE
  JUGEMENT
  APPEL
  EXECUTION
}

enum StatutDocument {
  ACTIF
  ARCHIVE
  SUPPRIME
}

enum StatutTache {
  A_FAIRE
  EN_COURS
  TERMINEE
}

enum StatutEvenement {
  PREVU
  TERMINE
  ANNULE
}

enum StatutMessage {
  ENVOYE
  LU
  SUPPRIME
}

enum StatutFacture {
  BROUILLON
  ENVOYEE
  PAYEE
  EN_RETARD
}

enum StatutPermission {
  ACTIF
  INACTIF
}

enum StatutArchive {
  ARCHIVE
  RESTAURE
}

enum TypeCorrespondance {
  APPEL
  EMAIL
  RENDEZ_VOUS
  AUTRE
}

//
// MODELES
//

model Utilisateur {
  id         String            @id @default(uuid())
  prenom     String
  nom        String
  email      String            @unique
  motDePasse String
  role       RoleUtilisateur   @default(ASSISTANT)
  statut     StatutUtilisateur @default(ACTIF)
  creeLe     DateTime          @default(now())
  modifieLe  DateTime          @updatedAt

  dossiers        Dossier[]             @relation("DossierResponsable")
  tachesCreees    Tache[]               @relation("CreateurTache")
  tachesAssignees Tache[]               @relation("AssigneTache")
  evenements      EvenementCalendrier[]
  messages        MessageChat[]
  documents       Document[]            @relation("DocumentsTeleverses")
  journauxAudit   JournalAudit[]
  archives        Archive[]
  correspondances Correspondance[]
  notes           Note[]
}

model Client {
  id            String       @id @default(uuid())
  prenom        String
  nom           String
  nomEntreprise String?
  telephone     String?
  email         String?
  adresse       String?
  statut        StatutClient @default(ACTIF)
  creeLe        DateTime     @default(now())
  modifieLe     DateTime     @updatedAt

  dossiers        Dossier[]
  factures        Facture[]
  correspondances Correspondance[]
  notes           Note[]
}

model Dossier {
  id            String        @id @default(uuid())
  numeroUnique  String        @unique
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id])
  titre         String
  type          TypeDossier
  description   String?
  responsableId String?
  responsable   Utilisateur?  @relation("DossierResponsable", fields: [responsableId], references: [id])
  statut        StatutDossier @default(OUVERT)
  creeLe        DateTime      @default(now())
  modifieLe     DateTime      @updatedAt

  // Relations spécifiques par type
  sinistreCorporel SinistreCorporel?
  sinistreMateriel SinistreMateriel?
  sinistreMortel   SinistreMortel?
  immobilier       Immobilier?
  sport            Sport?
  contrat          Contrat?
  contentieux      Contentieux?

  // ⚡ Relations inverses pour Prisma
  documents  Document[]
  taches     Tache[]
  evenements EvenementCalendrier[]
  messages   MessageChat[]
  factures   Facture[]
  notes      Note[]
}

//
// Sous-types de dossiers
//

model SinistreCorporel {
  id              String          @id @default(uuid())
  dossierId       String          @unique
  dossier         Dossier         @relation(fields: [dossierId], references: [id])
  dateAccident    DateTime
  lieuAccident    String
  numeroPvPolice  String?
  hopital         String?
  rapportMedical  String?
  graviteBlessure GraviteBlessure @default(MINEUR)
  assureur        String?
  numeroSinistre  String?
  temoins         Json?
  prejudice       Decimal?
  creeLe          DateTime        @default(now())
  modifieLe       DateTime        @updatedAt
}

model SinistreMateriel {
  id                String             @id @default(uuid())
  dossierId         String             @unique
  dossier           Dossier            @relation(fields: [dossierId], references: [id])
  dateAccident      DateTime
  lieuAccident      String
  categorieVehicule CategorieVehicule?
  marqueVehicule    String?
  modeleVehicule    String?
  immatriculation   String?
  numeroChassis     String?
  numeroPvPolice    String?
  assureur          String?
  numeroSinistre    String?
  estimationDegats  Decimal?
  photosUrls        Json?
  creeLe            DateTime           @default(now())
  modifieLe         DateTime           @updatedAt
}

model SinistreMortel {
  id                    String   @id @default(uuid())
  dossierId             String   @unique
  dossier               Dossier  @relation(fields: [dossierId], references: [id])
  dateDeces             DateTime
  lieuDeces             String?
  certificatDeces       String?
  certificatMedicoLegal String?
  numeroPvPolice        String?
  causeDeces            String?
  ayantsDroit           Json?
  indemniteReclamee     Decimal?
  creeLe                DateTime @default(now())
  modifieLe             DateTime @updatedAt
}

model Immobilier {
  id               String         @id @default(uuid())
  dossierId        String         @unique
  dossier          Dossier        @relation(fields: [dossierId], references: [id])
  adresseBien      String
  numeroTitre      String?
  numeroCadastre   String?
  referenceNotaire String?
  regimeFoncier    RegimeFoncier?
  surfaceM2        Decimal?
  typeLitige       String?
  chefQuartier     String?
  temoinsBornage   Json?
  creeLe           DateTime       @default(now())
  modifieLe        DateTime       @updatedAt
}

model Sport {
  id               String    @id @default(uuid())
  dossierId        String    @unique
  dossier          Dossier   @relation(fields: [dossierId], references: [id])
  club             String?
  competition      String?
  dateIncident     DateTime?
  instanceSportive String?
  referenceContrat String?
  sanctions        Json?
  creeLe           DateTime  @default(now())
  modifieLe        DateTime  @updatedAt
}

model Contrat {
  id               String    @id @default(uuid())
  dossierId        String    @unique
  dossier          Dossier   @relation(fields: [dossierId], references: [id])
  partieA          String
  partieB          String
  dateEffet        DateTime
  dateExpiration   DateTime?
  valeurContrat    Decimal?
  loiApplicable    String?   @default("CAMEROUN")
  referenceNotaire String?
  contratUrl       String?
  creeLe           DateTime  @default(now())
  modifieLe        DateTime  @updatedAt
}

model Contentieux {
  id              String          @id @default(uuid())
  dossierId       String          @unique
  dossier         Dossier         @relation(fields: [dossierId], references: [id])
  numeroAffaire   String?
  tribunal        String?
  juridiction     String?
  demandeur       String?
  defendeur       String?
  avocatPlaignant String?
  avocatDefenseur String?
  etapeProcedure  EtapeProcedure? @default(INSTRUCTIVE)
  montantReclame  Decimal?
  datesAudiences  Json?
  depots          Json?
  rapportHussier  String?
  creeLe          DateTime        @default(now())
  modifieLe       DateTime        @updatedAt
}

//
// Autres entités
//

model Document {
  id           String         @id @default(uuid())
  dossierId    String
  dossier      Dossier        @relation(fields: [dossierId], references: [id])
  televersePar String
  utilisateur  Utilisateur    @relation("DocumentsTeleverses", fields: [televersePar], references: [id])
  titre        String
  type         String
  url          String
  version      Int            @default(1)
  statut       StatutDocument @default(ACTIF)
  creeLe       DateTime       @default(now())
  modifieLe    DateTime       @updatedAt
}

model Tache {
  id          String       @id @default(uuid())
  dossierId   String?
  dossier     Dossier?     @relation(fields: [dossierId], references: [id])
  titre       String
  description String?
  assigneeId  String?
  assignee    Utilisateur? @relation("AssigneTache", fields: [assigneeId], references: [id])
  creeParId   String
  createur    Utilisateur  @relation("CreateurTache", fields: [creeParId], references: [id])
  dateLimite  DateTime?
  statut      StatutTache  @default(A_FAIRE)
  creeLe      DateTime     @default(now())
  modifieLe   DateTime     @updatedAt
}

model EvenementCalendrier {
  id          String          @id @default(uuid())
  dossierId   String?
  dossier     Dossier?        @relation(fields: [dossierId], references: [id])
  titre       String
  description String?
  debut       DateTime
  fin         DateTime
  creeParId   String
  createur    Utilisateur     @relation(fields: [creeParId], references: [id])
  statut      StatutEvenement @default(PREVU)
  creeLe      DateTime        @default(now())
  modifieLe   DateTime        @updatedAt
}

model MessageChat {
  id           String        @id @default(uuid())
  dossierId    String?
  dossier      Dossier?      @relation(fields: [dossierId], references: [id])
  expediteurId String
  expediteur   Utilisateur   @relation(fields: [expediteurId], references: [id])
  contenu      String
  statut       StatutMessage @default(ENVOYE)
  creeLe       DateTime      @default(now())
  modifieLe    DateTime      @updatedAt
}

model Facture {
  id           String        @id @default(uuid())
  dossierId    String?
  dossier      Dossier?      @relation(fields: [dossierId], references: [id])
  clientId     String
  client       Client        @relation(fields: [clientId], references: [id])
  montant      Decimal
  dateEcheance DateTime
  payee        Boolean       @default(false)
  statut       StatutFacture @default(BROUILLON)
  creeLe       DateTime      @default(now())
  modifieLe    DateTime      @updatedAt
}

model PermissionRole {
  id          String           @id @default(uuid())
  role        RoleUtilisateur
  module      String
  lecture     Boolean          @default(true)
  ecriture    Boolean          @default(false)
  suppression Boolean          @default(false)
  statut      StatutPermission @default(ACTIF)
  creeLe      DateTime         @default(now())
  modifieLe   DateTime         @updatedAt
}

model JournalAudit {
  id             String      @id @default(uuid())
  utilisateurId  String
  utilisateur    Utilisateur @relation(fields: [utilisateurId], references: [id])
  action         String
  typeCible      String
  cibleId        String
  ancienneValeur Json?
  nouvelleValeur Json?
  creeLe         DateTime    @default(now())
}

model Archive {
  id          String        @id @default(uuid())
  typeObjet   String
  objetId     String
  archivePar  String
  utilisateur Utilisateur   @relation(fields: [archivePar], references: [id])
  dateArchive DateTime      @default(now())
  statut      StatutArchive @default(ARCHIVE)
  creeLe      DateTime      @default(now())
  modifieLe   DateTime      @updatedAt
}

model Correspondance {
  id            String             @id @default(uuid())
  clientId      String
  client        Client             @relation(fields: [clientId], references: [id])
  utilisateurId String
  utilisateur   Utilisateur        @relation(fields: [utilisateurId], references: [id])
  type          TypeCorrespondance
  contenu       String?
  creeLe        DateTime           @default(now())
  modifieLe     DateTime           @updatedAt
}

model Note {
  id            String      @id @default(uuid())
  clientId      String?
  client        Client?     @relation(fields: [clientId], references: [id])
  dossierId     String?
  dossier       Dossier?    @relation(fields: [dossierId], references: [id])
  utilisateurId String
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  contenu       String
  creeLe        DateTime    @default(now())
  modifieLe     DateTime    @updatedAt
}
